{
  "version": 3,
  "sources": ["../esm/ignore.js"],
  "sourcesContent": ["import process from 'node:process';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport fastGlob from 'fast-glob';\nimport gitIgnore from 'ignore';\nimport slash from '@esm2cjs/slash';\nimport {toPath, isNegativePattern} from './utilities.js';\n\nconst ignoreFilesGlobOptions = {\n\tignore: [\n\t\t'**/node_modules',\n\t\t'**/flow-typed',\n\t\t'**/coverage',\n\t\t'**/.git',\n\t],\n\tabsolute: true,\n\tdot: true,\n};\n\nexport const GITIGNORE_FILES_PATTERN = '**/.gitignore';\n\nconst applyBaseToPattern = (pattern, base) => isNegativePattern(pattern)\n\t? '!' + path.posix.join(base, pattern.slice(1))\n\t: path.posix.join(base, pattern);\n\nconst parseIgnoreFile = (file, cwd) => {\n\tconst base = slash(path.relative(cwd, path.dirname(file.filePath)));\n\n\treturn file.content\n\t\t.split(/\\r?\\n/)\n\t\t.filter(line => line && !line.startsWith('#'))\n\t\t.map(pattern => applyBaseToPattern(pattern, base));\n};\n\nconst toRelativePath = (fileOrDirectory, cwd) => {\n\tcwd = slash(cwd);\n\tif (path.isAbsolute(fileOrDirectory)) {\n\t\tif (slash(fileOrDirectory).startsWith(cwd)) {\n\t\t\treturn path.relative(cwd, fileOrDirectory);\n\t\t}\n\n\t\tthrow new Error(`Path ${fileOrDirectory} is not in cwd ${cwd}`);\n\t}\n\n\treturn fileOrDirectory;\n};\n\nconst getIsIgnoredPredicate = (files, cwd) => {\n\tconst patterns = files.flatMap(file => parseIgnoreFile(file, cwd));\n\tconst ignores = gitIgnore().add(patterns);\n\n\treturn fileOrDirectory => {\n\t\tfileOrDirectory = toPath(fileOrDirectory);\n\t\tfileOrDirectory = toRelativePath(fileOrDirectory, cwd);\n\t\treturn ignores.ignores(slash(fileOrDirectory));\n\t};\n};\n\nconst normalizeOptions = (options = {}) => ({\n\tcwd: toPath(options.cwd) || process.cwd(),\n});\n\nexport const isIgnoredByIgnoreFiles = async (patterns, options) => {\n\tconst {cwd} = normalizeOptions(options);\n\n\tconst paths = await fastGlob(patterns, {cwd, ...ignoreFilesGlobOptions});\n\n\tconst files = await Promise.all(\n\t\tpaths.map(async filePath => ({\n\t\t\tfilePath,\n\t\t\tcontent: await fs.promises.readFile(filePath, 'utf8'),\n\t\t})),\n\t);\n\n\treturn getIsIgnoredPredicate(files, cwd);\n};\n\nexport const isIgnoredByIgnoreFilesSync = (patterns, options) => {\n\tconst {cwd} = normalizeOptions(options);\n\n\tconst paths = fastGlob.sync(patterns, {cwd, ...ignoreFilesGlobOptions});\n\n\tconst files = paths.map(filePath => ({\n\t\tfilePath,\n\t\tcontent: fs.readFileSync(filePath, 'utf8'),\n\t}));\n\n\treturn getIsIgnoredPredicate(files, cwd);\n};\n\nexport const isGitIgnored = options => isIgnoredByIgnoreFiles(GITIGNORE_FILES_PATTERN, options);\nexport const isGitIgnoredSync = options => isIgnoredByIgnoreFilesSync(GITIGNORE_FILES_PATTERN, options);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAoB;AACpB,qBAAe;AACf,uBAAiB;AACjB,uBAAqB;AACrB,oBAAsB;AACtB,mBAAkB;AAClB,uBAAwC;AAExC,MAAM,yBAAyB;AAAA,EAC9B,QAAQ;AAAA,IACP;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AAAA,EACA,UAAU;AAAA,EACV,KAAK;AACN;AAEO,MAAM,0BAA0B;AAEvC,MAAM,qBAAqB,CAAC,SAAS,aAAS,oCAAkB,OAAO,IACpE,MAAM,iBAAAA,QAAK,MAAM,KAAK,MAAM,QAAQ,MAAM,CAAC,CAAC,IAC5C,iBAAAA,QAAK,MAAM,KAAK,MAAM,OAAO;AAEhC,MAAM,kBAAkB,CAAC,MAAM,QAAQ;AACtC,QAAM,WAAO,aAAAC,SAAM,iBAAAD,QAAK,SAAS,KAAK,iBAAAA,QAAK,QAAQ,KAAK,QAAQ,CAAC,CAAC;AAElE,SAAO,KAAK,QACV,MAAM,OAAO,EACb,OAAO,UAAQ,QAAQ,CAAC,KAAK,WAAW,GAAG,CAAC,EAC5C,IAAI,aAAW,mBAAmB,SAAS,IAAI,CAAC;AACnD;AAEA,MAAM,iBAAiB,CAAC,iBAAiB,QAAQ;AAChD,YAAM,aAAAC,SAAM,GAAG;AACf,MAAI,iBAAAD,QAAK,WAAW,eAAe,GAAG;AACrC,YAAI,aAAAC,SAAM,eAAe,EAAE,WAAW,GAAG,GAAG;AAC3C,aAAO,iBAAAD,QAAK,SAAS,KAAK,eAAe;AAAA,IAC1C;AAEA,UAAM,IAAI,MAAM,QAAQ,iCAAiC,KAAK;AAAA,EAC/D;AAEA,SAAO;AACR;AAEA,MAAM,wBAAwB,CAAC,OAAO,QAAQ;AAC7C,QAAM,WAAW,MAAM,QAAQ,UAAQ,gBAAgB,MAAM,GAAG,CAAC;AACjE,QAAM,cAAU,cAAAE,SAAU,EAAE,IAAI,QAAQ;AAExC,SAAO,qBAAmB;AACzB,0BAAkB,yBAAO,eAAe;AACxC,sBAAkB,eAAe,iBAAiB,GAAG;AACrD,WAAO,QAAQ,YAAQ,aAAAD,SAAM,eAAe,CAAC;AAAA,EAC9C;AACD;AAEA,MAAM,mBAAmB,CAAC,UAAU,CAAC,OAAO;AAAA,EAC3C,SAAK,yBAAO,QAAQ,GAAG,KAAK,oBAAAE,QAAQ,IAAI;AACzC;AAEO,MAAM,yBAAyB,OAAO,UAAU,YAAY;AAClE,QAAM,EAAC,IAAG,IAAI,iBAAiB,OAAO;AAEtC,QAAM,QAAQ,UAAM,iBAAAC,SAAS,UAAU,EAAC,KAAK,GAAG,uBAAsB,CAAC;AAEvE,QAAM,QAAQ,MAAM,QAAQ;AAAA,IAC3B,MAAM,IAAI,OAAM,cAAa;AAAA,MAC5B;AAAA,MACA,SAAS,MAAM,eAAAC,QAAG,SAAS,SAAS,UAAU,MAAM;AAAA,IACrD,EAAE;AAAA,EACH;AAEA,SAAO,sBAAsB,OAAO,GAAG;AACxC;AAEO,MAAM,6BAA6B,CAAC,UAAU,YAAY;AAChE,QAAM,EAAC,IAAG,IAAI,iBAAiB,OAAO;AAEtC,QAAM,QAAQ,iBAAAD,QAAS,KAAK,UAAU,EAAC,KAAK,GAAG,uBAAsB,CAAC;AAEtE,QAAM,QAAQ,MAAM,IAAI,eAAa;AAAA,IACpC;AAAA,IACA,SAAS,eAAAC,QAAG,aAAa,UAAU,MAAM;AAAA,EAC1C,EAAE;AAEF,SAAO,sBAAsB,OAAO,GAAG;AACxC;AAEO,MAAM,eAAe,aAAW,uBAAuB,yBAAyB,OAAO;AACvF,MAAM,mBAAmB,aAAW,2BAA2B,yBAAyB,OAAO;",
  "names": ["path", "slash", "gitIgnore", "process", "fastGlob", "fs"]
}
