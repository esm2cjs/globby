{
  "version": 3,
  "sources": ["../esm/bench.js"],
  "sourcesContent": ["import process from 'node:process';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport {fileURLToPath} from 'node:url';\nimport Benchmark from 'benchmark';\nimport rimraf from 'rimraf';\nimport * as globbyMainBranch from '@globby/main-branch';\nimport gs from 'glob-stream';\nimport fastGlob from 'fast-glob';\nimport {globby, globbySync, globbyStream} from './index.js';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst BENCH_DIR = 'bench';\n\nconst runners = [\n\t{\n\t\tname: 'globby async (working directory)',\n\t\trun: globby,\n\t},\n\t{\n\t\tname: 'globby async (upstream/main)',\n\t\trun: globbyMainBranch.globby,\n\t},\n\t{\n\t\tname: 'globby sync (working directory)',\n\t\trun: globbySync,\n\t},\n\t{\n\t\tname: 'globby sync (upstream/main)',\n\t\trun: globbyMainBranch.globbySync,\n\t},\n\t{\n\t\tname: 'globby stream (working directory)',\n\t\trun: patterns => new Promise(resolve => {\n\t\t\tglobbyStream(patterns).on('data', () => {}).on('end', resolve);\n\t\t}),\n\t},\n\t{\n\t\tname: 'globby stream (upstream/main)',\n\t\trun: patterns => new Promise(resolve => {\n\t\t\tglobbyMainBranch.globbyStream(patterns).on('data', () => {}).on('end', resolve);\n\t\t}),\n\t},\n\t{\n\t\tname: 'glob-stream',\n\t\trun: patterns => new Promise(resolve => {\n\t\t\tgs(patterns).on('data', () => {}).on('end', resolve);\n\t\t}),\n\t},\n\t{\n\t\tname: 'fast-glob async',\n\t\trun: fastGlob,\n\t},\n\t{\n\t\tname: 'fast-glob sync',\n\t\trun: fastGlob.sync,\n\t},\n];\n\nconst benchs = [\n\t{\n\t\tname: 'negative globs (some files inside dir)',\n\t\tpatterns: [\n\t\t\t'a/*',\n\t\t\t'!a/c*',\n\t\t],\n\t},\n\t{\n\t\tname: 'negative globs (whole dir)',\n\t\tpatterns: [\n\t\t\t'a/*',\n\t\t\t'!a/**',\n\t\t],\n\t},\n\t{\n\t\tname: 'multiple positive globs',\n\t\tpatterns: [\n\t\t\t'a/*',\n\t\t\t'b/*',\n\t\t],\n\t},\n];\n\nconst before = () => {\n\tprocess.chdir(__dirname);\n\trimraf.sync(BENCH_DIR);\n\tfs.mkdirSync(BENCH_DIR);\n\tprocess.chdir(BENCH_DIR);\n\n\tconst directories = ['a', 'b']\n\t\t.map(directory => `${directory}/`);\n\n\tfor (const directory of directories) {\n\t\tfs.mkdirSync(directory);\n\t\tfor (let i = 0; i < 500; i++) {\n\t\t\tfs.writeFileSync(directory + (i < 100 ? 'c' : 'd') + i, '');\n\t\t}\n\t}\n};\n\nconst after = () => {\n\tprocess.chdir(__dirname);\n\trimraf.sync(BENCH_DIR);\n};\n\nconst suites = [];\nfor (const {name, patterns} of benchs) {\n\tconst suite = new Benchmark.Suite(name, {\n\t\tonStart() {\n\t\t\tbefore();\n\n\t\t\tconsole.log(`[*] Started Benchmarks \"${this.name}\"`);\n\t\t},\n\t\tonCycle(event) {\n\t\t\tconsole.log(`[+] ${String(event.target)}`);\n\t\t},\n\t\tonComplete() {\n\t\t\tafter();\n\n\t\t\tconsole.log(`\\nFastest is ${this.filter('fastest').map('name')} \\n`);\n\t\t},\n\t});\n\n\tfor (const {name, run} of runners) {\n\t\tsuite.add(name, run.bind(undefined, patterns));\n\t}\n\n\tsuites.push(suite);\n}\n\nlet index = 0;\nconst run = suite => {\n\tsuite.on('complete', () => {\n\t\tconst next = suites[++index];\n\t\tif (next) {\n\t\t\trun(next);\n\t\t}\n\t});\n\tsuite.run({async: true});\n};\n\nrun(suites[0]);\n"],
  "mappings": "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",
  "names": ["path", "gs", "fastGlob", "process", "rimraf", "fs", "Benchmark", "name", "run"]
}
