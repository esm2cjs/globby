{
  "version": 3,
  "sources": ["../esm/index.js"],
  "sourcesContent": ["import fs from 'node:fs';\nimport nodePath from 'node:path';\nimport merge2 from 'merge2';\nimport fastGlob from 'fast-glob';\nimport dirGlob from 'dir-glob';\nimport {\n\tGITIGNORE_FILES_PATTERN,\n\tisIgnoredByIgnoreFiles,\n\tisIgnoredByIgnoreFilesSync,\n} from './ignore.js';\nimport {FilterStream, toPath, isNegativePattern} from './utilities.js';\n\nconst assertPatternsInput = patterns => {\n\tif (patterns.some(pattern => typeof pattern !== 'string')) {\n\t\tthrow new TypeError('Patterns must be a string or an array of strings');\n\t}\n};\n\nconst toPatternsArray = patterns => {\n\tpatterns = [...new Set([patterns].flat())];\n\tassertPatternsInput(patterns);\n\treturn patterns;\n};\n\nconst checkCwdOption = options => {\n\tif (!options.cwd) {\n\t\treturn;\n\t}\n\n\tlet stat;\n\ttry {\n\t\tstat = fs.statSync(options.cwd);\n\t} catch {\n\t\treturn;\n\t}\n\n\tif (!stat.isDirectory()) {\n\t\tthrow new Error('The `cwd` option must be a path to a directory');\n\t}\n};\n\nconst normalizeOptions = (options = {}) => {\n\toptions = {\n\t\tignore: [],\n\t\texpandDirectories: true,\n\t\t...options,\n\t\tcwd: toPath(options.cwd),\n\t};\n\n\tcheckCwdOption(options);\n\n\treturn options;\n};\n\nconst normalizeArguments = fn => async (patterns, options) => fn(toPatternsArray(patterns), normalizeOptions(options));\nconst normalizeArgumentsSync = fn => (patterns, options) => fn(toPatternsArray(patterns), normalizeOptions(options));\n\nconst getIgnoreFilesPatterns = options => {\n\tconst {ignoreFiles, gitignore} = options;\n\n\tconst patterns = ignoreFiles ? toPatternsArray(ignoreFiles) : [];\n\tif (gitignore) {\n\t\tpatterns.push(GITIGNORE_FILES_PATTERN);\n\t}\n\n\treturn patterns;\n};\n\nconst getFilter = async options => {\n\tconst ignoreFilesPatterns = getIgnoreFilesPatterns(options);\n\treturn createFilterFunction(\n\t\tignoreFilesPatterns.length > 0 && await isIgnoredByIgnoreFiles(ignoreFilesPatterns, {cwd: options.cwd}),\n\t);\n};\n\nconst getFilterSync = options => {\n\tconst ignoreFilesPatterns = getIgnoreFilesPatterns(options);\n\treturn createFilterFunction(\n\t\tignoreFilesPatterns.length > 0 && isIgnoredByIgnoreFilesSync(ignoreFilesPatterns, {cwd: options.cwd}),\n\t);\n};\n\nconst createFilterFunction = isIgnored => {\n\tconst seen = new Set();\n\n\treturn fastGlobResult => {\n\t\tconst path = fastGlobResult.path || fastGlobResult;\n\t\tconst pathKey = nodePath.normalize(path);\n\t\tconst seenOrIgnored = seen.has(pathKey) || (isIgnored && isIgnored(path));\n\t\tseen.add(pathKey);\n\t\treturn !seenOrIgnored;\n\t};\n};\n\nconst unionFastGlobResults = (results, filter) => results.flat().filter(fastGlobResult => filter(fastGlobResult));\nconst unionFastGlobStreams = (streams, filter) => merge2(streams).pipe(new FilterStream(fastGlobResult => filter(fastGlobResult)));\n\nconst convertNegativePatterns = (patterns, options) => {\n\tconst tasks = [];\n\n\twhile (patterns.length > 0) {\n\t\tconst index = patterns.findIndex(pattern => isNegativePattern(pattern));\n\n\t\tif (index === -1) {\n\t\t\ttasks.push({patterns, options});\n\t\t\tbreak;\n\t\t}\n\n\t\tconst ignorePattern = patterns[index].slice(1);\n\n\t\tfor (const task of tasks) {\n\t\t\ttask.options.ignore.push(ignorePattern);\n\t\t}\n\n\t\tif (index !== 0) {\n\t\t\ttasks.push({\n\t\t\t\tpatterns: patterns.slice(0, index),\n\t\t\t\toptions: {\n\t\t\t\t\t...options,\n\t\t\t\t\tignore: [\n\t\t\t\t\t\t...options.ignore,\n\t\t\t\t\t\tignorePattern,\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tpatterns = patterns.slice(index + 1);\n\t}\n\n\treturn tasks;\n};\n\nconst getDirGlobOptions = (options, cwd) => ({\n\t...(cwd ? {cwd} : {}),\n\t...(Array.isArray(options) ? {files: options} : options),\n});\n\nconst generateTasks = async (patterns, options) => {\n\tconst globTasks = convertNegativePatterns(patterns, options);\n\n\tconst {cwd, expandDirectories} = options;\n\n\tif (!expandDirectories) {\n\t\treturn globTasks;\n\t}\n\n\tconst patternExpandOptions = getDirGlobOptions(expandDirectories, cwd);\n\tconst ignoreExpandOptions = cwd ? {cwd} : undefined;\n\n\treturn Promise.all(\n\t\tglobTasks.map(async task => {\n\t\t\tlet {patterns, options} = task;\n\n\t\t\t[\n\t\t\t\tpatterns,\n\t\t\t\toptions.ignore,\n\t\t\t] = await Promise.all([\n\t\t\t\tdirGlob(patterns, patternExpandOptions),\n\t\t\t\tdirGlob(options.ignore, ignoreExpandOptions),\n\t\t\t]);\n\n\t\t\treturn {patterns, options};\n\t\t}),\n\t);\n};\n\nconst generateTasksSync = (patterns, options) => {\n\tconst globTasks = convertNegativePatterns(patterns, options);\n\n\tconst {cwd, expandDirectories} = options;\n\n\tif (!expandDirectories) {\n\t\treturn globTasks;\n\t}\n\n\tconst patternExpandOptions = getDirGlobOptions(expandDirectories, cwd);\n\tconst ignoreExpandOptions = cwd ? {cwd} : undefined;\n\n\treturn globTasks.map(task => {\n\t\tlet {patterns, options} = task;\n\t\tpatterns = dirGlob.sync(patterns, patternExpandOptions);\n\t\toptions.ignore = dirGlob.sync(options.ignore, ignoreExpandOptions);\n\t\treturn {patterns, options};\n\t});\n};\n\nexport const globby = normalizeArguments(async (patterns, options) => {\n\tconst [\n\t\ttasks,\n\t\tfilter,\n\t] = await Promise.all([\n\t\tgenerateTasks(patterns, options),\n\t\tgetFilter(options),\n\t]);\n\tconst results = await Promise.all(tasks.map(task => fastGlob(task.patterns, task.options)));\n\n\treturn unionFastGlobResults(results, filter);\n});\n\nexport const globbySync = normalizeArgumentsSync((patterns, options) => {\n\tconst tasks = generateTasksSync(patterns, options);\n\tconst filter = getFilterSync(options);\n\tconst results = tasks.map(task => fastGlob.sync(task.patterns, task.options));\n\n\treturn unionFastGlobResults(results, filter);\n});\n\nexport const globbyStream = normalizeArgumentsSync((patterns, options) => {\n\tconst tasks = generateTasksSync(patterns, options);\n\tconst filter = getFilterSync(options);\n\tconst streams = tasks.map(task => fastGlob.stream(task.patterns, task.options));\n\n\treturn unionFastGlobStreams(streams, filter);\n});\n\nexport const isDynamicPattern = normalizeArgumentsSync(\n\t(patterns, options) => patterns.some(pattern => fastGlob.isDynamicPattern(pattern, options)),\n);\n\nexport const generateGlobTasks = normalizeArguments(generateTasks);\nexport const generateGlobTasksSync = normalizeArgumentsSync(generateTasksSync);\n\nexport {\n\tisGitIgnored,\n\tisGitIgnoredSync,\n} from './ignore.js';\n"],
  "mappings": "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",
  "names": ["import_ignore", "fs", "nodePath", "merge2", "patterns", "options", "dirGlob", "fastGlob"]
}
